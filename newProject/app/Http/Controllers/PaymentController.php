<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Booking;
use App\Models\OrderDetail;
use App\Models\Payment;
use Illuminate\Support\Facades\Auth;

class PaymentController extends Controller
{
    public function showPaymentForm($booking_id, $cycle)
    {
        $booking = Booking::findOrFail($booking_id);

        $orderDetails = OrderDetail::where('booking_id', $booking_id)
            ->where('booking_cycle', $cycle)
            ->get();

        $total = $orderDetails->sum('total');

        return view('payment.form', compact('booking', 'cycle', 'orderDetails', 'total'));
    }

    public function processPayment(Request $request)
    {
        $request->validate([
            'booking_id' => 'required|exists:bookings,booking_id',
            'booking_cycle' => 'required|in:1,2',
            'payment_method' => 'required|string',
        ]);

        $booking_id = $request->booking_id;
        $cycle = $request->booking_cycle;

        // ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å OrderDetail ‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
        $total = OrderDetail::where('booking_id', $booking_id)
            ->where('booking_cycle', $cycle)
            ->sum('total');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        $existing = Payment::where('booking_id', $booking_id)
            ->where('booking_cycle', $cycle)
            ->first();

        if ($existing) {
            return back()->withErrors(['error' => '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß']);
        }

        Payment::create([
            'payment_method' => $request->payment_method,
            'total' => $total,
            'status' => 'paid',
            'booking_cycle' => $cycle,
            'booking_id' => $booking_id,
        ]);

        return redirect()->route('cartItem.allItem')->with('success', '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
    }

    public function index()
    {
        $bookings = Booking::with(['payments', 'orderDetails', 'selectService'])
            ->whereBelongsTo(auth()->user())
            ->where('status', 'confirmed') // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            ->orderBy('created_at', 'desc')
            ->get();

            foreach ($bookings as $booking) {
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å order details (‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏≠‡∏ö 1 ‡πÅ‡∏•‡∏∞ 2)
                $total = $booking->orderDetails->sum('total');
            
                // ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà payment ‡∏ñ‡∏π‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß
                $paid = $booking->payments->where('status', 'paid')->sum('total');
            
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á
                $unpaid = max(0, $total - $paid); // ‡∏Å‡∏±‡∏ô‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á property ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Blade
                $booking->total_with_staff = $total; // ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                $booking->paid = $paid;
                $booking->unpaid = $unpaid;
            }
            

        return view('payment.index', compact('bookings'));
    }


    public function viewUpdate($booking_id, Request $request)
{
    $action = $request->query('action');

    $booking = Booking::with(['payments'])->where('booking_id', $booking_id)->firstOrFail();

    // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ->filter() ‡∏´‡∏£‡∏∑‡∏≠ ->where() ‡∏ö‡∏ô Collection
    if ($action === 'pay_remaining') {
        $payments = $booking->payments->where('status', 'paid')->where('booking_cycle', '2');
    }else{
        $payments = $booking->payments->where('status', 'unpaid');
    }
    

    return view('payment.viewUpdate', compact('payments', 'booking'));
}

public function updateMethod(Request $request, $id)
{
    $request->validate([
        'payment_method' => 'required|in:paypal,credit_card',
    ]);

    $payment = Payment::findOrFail($id);
    $booking = Booking::with(['orderDetails', 'payments'])->findOrFail($payment->booking_id);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    $totalRequired = $booking->orderDetails->sum('total');

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏ß‡∏°‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
    $alreadyPaid = $booking->payments->where('status', 'paid')->sum('total');

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
    $amountToAdd = max(0, $totalRequired - $alreadyPaid);

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÉ‡∏ô payment ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    $payment->payment_method = $request->payment_method;
    $payment->total += $amountToAdd; // üî• ‡∏ö‡∏ß‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    $payment->status = 'paid';
    $payment->save();

    // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô OrderDetail ‡∏£‡∏≠‡∏ö 2 ‚Üí 1
    OrderDetail::where('booking_id', $booking->booking_id)
        ->where('booking_cycle', 2)
        ->update(['booking_cycle' => 1]);

    // ‚úÖ ‡∏õ‡∏¥‡∏î hasOverrented
    $booking->hasOverrented = 0;
    $booking->save();

    return redirect()->route('payment.index')->with('success', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}








}
